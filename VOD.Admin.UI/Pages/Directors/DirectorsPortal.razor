@inject IAdminService AdminService
<h3>@Navigation</h3>

@if(Alert != null || Alert != string.Empty)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>@Alert</strong>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="CloseAlert"></button>
    </div>
}
<button type="button" href="/" class="btn btn-outline-secondary">Home</button>
<button type="button" class="btn btn-outline-primary" @onclick="()=>ChangePageType(PageType.Index)">Index</button>
<button type="button" class="btn btn-outline-success" @onclick="()=>ChangePageType(PageType.Create)">Create</button>



@code {
    string Alert = string.Empty;
    string Navigation = PageType.Index;
    List<DirectorDTO> Model = new();

    void ChangePageType(string pageType) => Navigation = pageType;    

    void CloseAlert() => Alert = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        Alert = "Test message";




        //var test = await AdminService.SingleAsync<DirectorDTO>($"directors/3");

        //Model = await AdminService.GetAsync<DirectorDTO>($"directors?freeOnly=false"); 

        //await AdminService.CreateAsync<DirectorDTO>("directors", new DirectorDTO
        //{
        //    Name = "Joe Johnston"
        //});

        //await AdminService.EditAsync<DirectorEditDTO>($"directors/{test.Id}", new DirectorEditDTO{
        //    Name = "test nisse"
        //});

        //await AdminService.DeleteAsync<DirectorDTO>($"directors/{test.Id}");
    }
}
