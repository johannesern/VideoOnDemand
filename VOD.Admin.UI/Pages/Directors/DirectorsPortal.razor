@inject IAdminService AdminService

<h3>@Navigation</h3>

@if(Alert != string.Empty)
{
    <div class="alert alert-danger alert-dismissible fade show w-50" role="alert">
        <strong>@Alert</strong>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="CloseAlert"></button>
    </div>
}

<div class="d-flex me-1">
    <a type="button" href="/" class="btn btn-outline-secondary rounded-0 me-1">Home</a>
    <button type="button" class="btn btn-outline-primary rounded-0 me-1" @onclick="()=>ChangePageType(PageType.Index)">Index</button>
    <button type="button" class="btn btn-outline-success rounded-0" @onclick="()=>ChangePageType(PageType.Create)">Create</button>
</div>

<DirectorsIndex OnClick="OnClick" Model="Model"></DirectorsIndex>

@code {
    string Alert = string.Empty;
    string Navigation = PageType.Index;
    List<DirectorDTO> Model { get; set; } = new();

    void ChangePageType(string pageType) => Navigation = pageType;    

    void CloseAlert() => Alert = string.Empty;




    protected override async Task OnInitializedAsync()
    {
        //Alert = string.Empty;

        //Model = await AdminService.GetAsync<DirectorDTO>($"directors"); 

        //await AdminService.CreateAsync<DirectorDTO>("directors", new DirectorDTO
        //{
        //    Name = "Ingmar Bergman"
        //});

        //var test = await AdminService.SingleAsync<DirectorDTO>($"directors/5");

        //await AdminService.EditAsync<DirectorEditDTO>($"directors/5", new DirectorEditDTO
        //{
        //    Id = 5,
        //    Name = "test nisse"
        //});

        //await AdminService.DeleteAsync<DirectorDTO>($"directors/5");
    }
}
