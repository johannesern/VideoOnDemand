@inject IAdminService AdminService

<div class="d-flex justify-content-center">
    <form class="d-flex justify-content-center mb-5 border border-1 border-secondary w-25 p-2">
        <EditForm Model="Model" OnValidSubmit="@OnFormSubmit">
            <DataAnnotationsValidator />
            <h4>@Page FilmGenre</h4>
            <div>
                @if (Page.Equals(PageType.Delete))
                {
                    <InputText id="Film Title" class="form-control me-2" @bind-Value="Model.Film.Title" disabled placeholder="Film Title"></InputText>
                    <InputText id="Genre Title" class="form-control me-2" @bind-Value="Model.Genre.Name" disabled placeholder="Genre Name"></InputText>
                }
                else
                {
                    <InputSelect @bind-Value="Model.FilmId" class="form-control mb-3">
                        <option value=0>Film Title ...</option>
                        @foreach (var film in Films)
                        {
                            <option value="@film.Id">@film.Title</option>
                        }
                    </InputSelect>
                    <InputSelect @bind-Value="Model.GenreId" class="form-control mb-3">
                        <option value=0>Genre Name ...</option>
                        @foreach (var genre in Genres)
                        {
                            <option value="@genre.Id">@genre.Name</option>
                        }
                    </InputSelect>
                }
                <ValidationMessage For="@(() => Model.FilmId)" />
                <ValidationMessage For="@(() => Model.GenreId)" />
            </div>

            <div>
                <button type="submit" class="btn btn-@(Page.Equals(PageType.Delete)? "danger" : "primary") rounded-0 mb-1">@Page FilmGenre</button>
            </div>
        </EditForm>
    </form>
</div>
@code {
    [Parameter] public FilmGenreDTO Model { get; set; } = new();
    [Parameter] public string Page { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnChange { get; set; }
    List<FilmDTO> Films { get; set; } = new();
    List<GenreDTO> Genres { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Films = await AdminService.GetAsync<FilmDTO>("Films");
        Genres = await AdminService.GetAsync<GenreDTO>("Genres");
    }

    private async Task OnFormSubmit()
    {
        try
        {
            if (Page == PageType.Create)
                await AdminService.CreateAsync<FilmGenreDTO>("filmgenres", Model);
                            
            else if (Page == PageType.Delete)
                await AdminService.DeleteRefAsync<FilmGenreDTO>($"filmgenres", Model);

            await OnChange.InvokeAsync("");
        }
        catch
        {
            await OnChange.InvokeAsync("Couldn't create/edit/delete the course.");
        }
    }
}
