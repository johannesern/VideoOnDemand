@inject IAdminService AdminService

<h3>@Navigation</h3>

@if (Alert != string.Empty)
{
    <div class="alert alert-danger alert-dismissible fade show w-50" role="alert">
        <strong>@Alert</strong>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="CloseAlert"></button>
    </div>
}

@if (Navigation == PageType.Create)
{
    <ChangeGenre Page="@Navigation" OnChange="OnChange"></ChangeGenre>
}
@if (Navigation == PageType.Edit || Navigation == PageType.Delete)
{
    <ChangeGenre Page="@Navigation" OnChange="OnChange" Model="Genre"></ChangeGenre>
}

<div class="d-flex me-1">
    <a type="button" href="/" class="btn btn-outline-secondary rounded-0 me-1">Home</a>
    <button type="button" class="btn btn-outline-primary rounded-0 me-1" @onclick="()=>ChangePageType(PageType.Index)">Index</button>
    <button type="button" class="btn btn-outline-success rounded-0" @onclick="()=>ChangePageType(PageType.Create)">Create</button>
</div>

<GenresIndex OnClick="OnClick" Model="Model"></GenresIndex>

@code {
    string Alert = string.Empty;
    string Navigation = PageType.Index;
    List<GenreDTO> Model { get; set; } = new();
    GenreDTO Genre = new();

    void ChangePageType(string pageType) => Navigation = pageType;

    void CloseAlert() => Alert = string.Empty;

    async Task OnClick(ClickModel model)
    {
        if (model.PageType.Equals(PageType.Edit) || model.PageType.Equals(PageType.Delete))
        {
            try
            {
                Genre = await AdminService.SingleAsync<GenreDTO>($"genres/{model.Id}");
            }
            catch { Alert = "No result."; }
        }
        ChangePageType(model.PageType);
    }

    async Task OnChange(string alert)
    {
        Alert = alert;
        Model = await AdminService.GetAsync<GenreDTO>($"genres");
        ChangePageType(PageType.Index);
    }

    protected override async Task OnInitializedAsync()
    {
        Alert = string.Empty;

        Model = await AdminService.GetAsync<GenreDTO>($"genres");
    }
}
