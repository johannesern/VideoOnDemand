@inject IAdminService AdminService

<h3>@Navigation</h3>

@if (Alert != string.Empty)
{
    <div class="alert alert-danger alert-dismissible fade show w-50" role="alert">
        <strong>@Alert</strong>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="CloseAlert"></button>
    </div>
}

<div class="d-flex me-1">
    <a type="button" href="/" class="btn btn-outline-secondary rounded-0 me-1">Home</a>
    <button type="button" class="btn btn-outline-primary rounded-0 me-1" @onclick="()=>ChangePageType(PageType.Index)">Index</button>
    <button type="button" class="btn btn-outline-success rounded-0" @onclick="()=>ChangePageType(PageType.Create)">Create</button>
</div>

<FilmsIndex OnClick="OnClick" Model="Model"></FilmsIndex>

@code {
    string Alert = string.Empty;
    string Navigation = PageType.Index;
    List<FilmDTO> Model { get; set; } = new();
    FilmDTO FilmDTO = new();        //Denna jobbar du med

    void ChangePageType(string pageType) => Navigation = pageType;

    void CloseAlert() => Alert = string.Empty;

    async Task OnClick(ClickModel model)
    {
        if (model.PageType.Equals(PageType.Edit) || model.PageType.Equals(PageType.Delete))
        {
            try
            {
                var result = await AdminService.SingleAsync<FilmDTO>($"films/{model.Id}");                
                if (result != null) { Model.Add(result); }
                else{ Alert = "No result."; }
            }
            catch(Exception ex){}
        }
        ChangePageType(model.PageType);
    }

    async Task OnChange(string alert)           //OCH DENNA
    {
        try
        {
            Model = await AdminService.GetAsync<FilmDTO>($"films");
            ChangePageType(PageType.Index);
        }
        catch { Alert = alert; }
    }

    protected override async Task OnInitializedAsync()
    {
        Alert = string.Empty;

        Model = await AdminService.GetAsync<FilmDTO>($"films");

        //await AdminService.CreateAsync<DirectorDTO>("directors", new DirectorDTO
        //{
        //    Name = "Ingmar Bergman"
        //});

        //var test = await AdminService.SingleAsync<DirectorDTO>($"directors/5");

        //await AdminService.EditAsync<DirectorEditDTO>($"directors/5", new DirectorEditDTO
        //{
        //    Id = 5,
        //    Name = "test nisse"
        //});

        //await AdminService.DeleteAsync<DirectorDTO>($"directors/5");
    }
}
