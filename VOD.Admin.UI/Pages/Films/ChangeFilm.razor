@inject IAdminService AdminService

<div class="d-flex justify-content-center">
    <form class="d-flex justify-content-center mb-5 border border-1 border-secondary w-25 p-2">
        <EditForm Model="Model" OnValidSubmit="@OnFormSubmit">
            <DataAnnotationsValidator />
            <h4>@Page Film</h4>
            <div>
                @if (Page.Equals(PageType.Delete))
                {
                    <InputText id="title" class="form-control mb-1" @bind-Value="Model.Title" disabled placeholder="Title"></InputText>
                }
                else
                {
                    <InputText id="title" class="form-control mb-1" @bind-Value="Model.Title" placeholder="Title"></InputText>
                }
            </div>
            <ValidationMessage For="@(() => Model.Title)"/>
            @if (!Page.Equals(PageType.Delete))
            {            
                <div>
                    <InputText id="description" class="form-control mb-1" @bind-Value="Model.Description" placeholder="Description"></InputText>
                </div>
                <ValidationMessage For="@(() => Model.Description)" />

                <div>
                    <InputText id="description" class="form-control mb-1" @bind-Value="Model.Released" placeholder="Released"></InputText>
                </div>
                <ValidationMessage For="@(() => Model.Released)" />

                <div>
                    <InputText id="thumbnailURL" class="form-control mb-1" @bind-Value="Model.ThumbnailURL" placeholder="ThumbnailURL"></InputText>
                </div>
                <ValidationMessage For="@(() => Model.ThumbnailURL)" />
                <div>
                    <InputText id="backgroundURL" class="form-control mb-1" @bind-Value="Model.BackgroundURL" placeholder="BackgroundURL"></InputText>
                </div>
                <ValidationMessage For="@(() => Model.BackgroundURL)" />

                <div>
                    <InputText id="filmURL" class="form-control mb-1" @bind-Value="Model.FilmUrl" placeholder="FilmURL"></InputText>
                </div>
                <ValidationMessage For="@(() => Model.FilmUrl)"/>

                <div>
                    <InputSelect id="selectDirector" class="form-control mb-1" @bind-Value="Model.DirectorId">
                        <option value=0>Director...</option>
                        @foreach(var director in Directors)
                        {
                            <option value="@director.Id">@director.Name</option>
                        }
                    </InputSelect>
                </div>
                
                <div>
                    <label>
                        <InputCheckbox @bind-Value="Model.Free"></InputCheckbox>
                        Free to watch
                    </label>
                </div>
            }
            <div>
                <button type="submit" class="btn btn-@(Page.Equals(PageType.Delete)? "danger" : "primary") rounded-0 mb-1">@Page film</button>
            </div>
        </EditForm>
    </form>
</div>
@code {
    [Parameter] public FilmDTO Model { get; set; } = new();
    [Parameter] public string Page { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnChange { get; set; }
    List<DirectorDTO> Directors = new();
    List<GenreDTO> Genres = new();

    private async Task OnFormSubmit()
    {
        try
        {
            if(Page == PageType.Create)            
                await AdminService.CreateAsync<FilmDTO>("films", Model);            

            else if(Page == PageType.Edit)            
                await AdminService.EditAsync<FilmDTO>($"films/{Model.Id}", Model);

            else if(Page == PageType.Delete)            
                await AdminService.DeleteAsync<FilmDTO>($"films/{Model.Id}");

            await OnChange.InvokeAsync("");
        }
        catch
        {
            await OnChange.InvokeAsync("Couldn't create/edit/delete the course.");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Directors = await AdminService.GetAsync<DirectorDTO>($"directors");
        Genres = await AdminService.GetAsync<GenreDTO>($"genres");
    }  
}
