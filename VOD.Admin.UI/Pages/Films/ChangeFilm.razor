@inject IAdminService AdminService

<form class="d-flex justify-content-center mb-5 border border-1 border-secondary w-25 p-2">
    <EditForm Model="Model" OnValidSubmit="@OnFormSubmit">
        <DataAnnotationsValidator />
        <h4>@Page Film</h4>
        <div class="mb-3">
            @if (Page.Equals(PageType.Delete))
            {
                <InputText id="title" @bind-Value="Model.Title" disabled placeholder="Title" ></InputText>
                
            }
            else
            {
                <InputText id="title" @bind-Value="Model.Title" placeholder="Title"></InputText>
            }
        </div>
        <ValidationMessage For="@(() => Model.Title)"/>
        @if (!Page.Equals(PageType.Delete))
        {            
            <div>
                <InputText id="description" class="form-control" @bind-Value="Model.Description"></InputText>
            </div>
            <ValidationMessage For="@(() => Model.Description)" />

            <div>
                <InputText id="thumbnailURL" @bind-Value="Model.ThumbnailURL"></InputText>
            </div>
            <ValidationMessage For="@(() => Model.ThumbnailURL)" />

            <div>
                <InputText id="filmURL" @bind-Value="Model.FilmUrl"></InputText>
            </div>
            <ValidationMessage For="@(() => Model.FilmUrl)"/>

            <div>
                <InputSelect id="selectDirector" @bind-Value="Model.DirectorId">
                    <option value=0>Director...</option>
                    @foreach(var director in Directors)
                    {
                        <option value="@director.Id">@director.Name</option>
                    }
                </InputSelect>
            </div>
            
            <div>
                <label>
                    <InputCheckbox @bind-Value="Model.Free"></InputCheckbox>
                    Free to watch
                </label>
            </div>
            <div>
                <button type="submit" class="btn btn-@(Page.Equals(PageType.Delete)? "danger" : "primary") rounded-0">Submit</button>
            </div>
        }
    </EditForm>
</form>

@code {
    [Parameter] public FilmDTO Model { get; set; } = new();
    [Parameter] public string Page { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnChange { get; set; }
    List<DirectorDTO> Directors = new();

    private async Task OnFormSubmit()
    {
        try
        {
            if(Page == PageType.Create)            
                await AdminService.CreateAsync<FilmDTO>("films", Model);            

            else if(Page == PageType.Edit)            
                await AdminService.EditAsync<FilmDTO>($"films/{Model.Id}", Model);

            else if(Page == PageType.Delete)            
                await AdminService.DeleteAsync<FilmDTO>($"films/{Model.Id}");

            await OnChange.InvokeAsync("");
        }
        catch
        {
            await OnChange.InvokeAsync("Couldn't create/edit/delete the course.");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Directors = await AdminService.GetAsync<DirectorDTO>($"directors");
    }
}
